as.data.frame(read.csv("puas.csv",sep = " ",dec = "."))
read.table("puas.txt",sep = " ",dec = ".")
read.table("puas.txt",sep = " ",dec = ".")
read.table("puas.txt",sep = " ",dec = ".",header=F)
read.table("puas.txt",sep = " ",dec = ".",header=F)
read.table("puas.txt",sep = " ",dec = ".",header=T)
PuasDistr<<-as.data.frame(read.table("puas.txt",sep = " ",dec = "."));
exc = function(x){
sum((x-mean(x))^4)/length(x)/var(x)^2-3;
}
asm = function(x){
sum((x-mean(x))^3)/length(x)/var(x)^(3/2)
}
allProp = function(x){ data.frame(mean = mean(x),var = var(x),asm = asm(x),exc = exc(x))}
PuasDistr = as.data.frame(read.table("puas.txt",sep = " ",dec = "."));
PuasDistr
PuasDistr = as.vector(read.table("puas.txt",sep = " ",dec = "."));
PuasDistr
PuasDistr = c(read.table("puas.txt",sep = " ",dec = "."));
PuasDistr
PuasDistr = as.array(read.table("puas.txt",sep = " ",dec = "."));
PuasDistr
PuasDistr = as.vector(read.table("puas.txt",sep = " ",dec = "."));
PuasDistr
c(PuasDistr)
as.vector(PuasDistr)
as.vector(PuasDistr,mode = F)
as.vector(PuasDistr,mode = "any")
as.vector(PuasDistr,mode = "double")
PuasDistr = as.vector(read.table("puas.txt",sep = " ",dec = "."),mode = "double");
PuasDistr
set.seed(100);
sort(PuasDistr)
distributions = list(PuasDistr=PuasDistr);
distributions = list(PuasDistr=PuasDistr);
sort(PuasDistr)
lapply(distributions,FUN = plot.ecdf,col.01line = "red",col="green")
hist(PuasDistr,
breaks = 20,
freq = F,
col = "lightblue",
xlab = "Диаметр юбки",
ylab = "Плотность вероятности",
main = "PuasDistr Гистограмма"
);
hist(PuasDistr,
breaks = 2,
freq = F,
col = "lightblue",
xlab = "Диаметр юбки",
ylab = "Плотность вероятности",
main = "PuasDistr Гистограмма"
);
hist(PuasDistr,
breaks = 42,
freq = F,
col = "lightblue",
xlab = "Диаметр юбки",
ylab = "Плотность вероятности",
main = "PuasDistr Гистограмма"
);
hist(PuasDistr,
breaks = 20,
freq = F,
col = "lightblue",
xlab = "Диаметр юбки",
ylab = "Плотность вероятности",
main = "PuasDistr Гистограмма"
);
allProp = function(x){ data.frame(mean = mean(x),var = var(x),median  = median(x),asm = asm(x),exc = exc(x))}
distributionsProp = t(sapply(distributions,allProp))
distributionsProp
ecdf(PuasDistr)
ecdf(PuasDistr)
ecdf(PuasDistr)
pPuasDistr <- ecdf(PuasDistr)
pPuasDistr(PuasDistr)  # returns the
pPuasDistr <- ecdf(PuasDistr) # эмпир функц
pPuasDistr(PuasDistr)  # процентили
pPuasDistr
pPuasDistr
pPuasDistr(PuasDistr)  # процентили
pPuasDistr(0)  # процентили
pPuasDistr(1)  # процентили
pPuasDistr(PuasDistr)  # процентили
a_1 = 0.02; a = 0.00; b = 5.79; lamda_0 = 4.00; lamda_1 = 6.00
pPuasDistr(a_1)
pPuasDistr(0)
pPuasDistr(1)
pPuasDistr(11)
pPuasDistr(111)
pPuasDistr(a_1)
pPuasDistr(b)
pPuas = function(a,b){pPuasDistr(b) - pPuasDistr(a)}
pPuas(a,b)
library(dplyr)
library(tidyr)
library(xtable)
library(ggvis)
library(ggplot2)
set.seed(100);
options(scipen = 0, digits = 3)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,fig.path = "README_figs/README-")
pPuasDistr
#Вероятность попадания в интервал (percentiles for x)
pPuasDistr <- ecdf(PuasDistr) # эмпир функц
pPuasDistr$x
#Вероятность попадания в интервал (percentiles for x)
pPuasDistr <- ecdf(PuasDistr) # эмпир функц
pPuasDistr[1]
ecdf(PuasDistr)
View(AnnualDiameter)
a_1 = 0.02; a = 0.00; b = 5.79; lamda_0 = 4.00; lamda_1 = 6.00
PuasDistr = as.vector(read.table("puas.txt",sep = " ",dec = "."),mode = "double");
a_1 = 0.02; a = 0.00; b = 5.79; lamda_0 = 4.00; lamda_1 = 6.00
PuasDistr = as.vector(read.table("puas.txt",sep = " ",dec = "."),mode = "double");
distributions = list(PuasDistr=PuasDistr);
sort(PuasDistr)
lapply(distributions,FUN = plot.ecdf,col.01line = "red",col="green")
hist(PuasDistr,
breaks = 20,
freq = F,
col = "lightblue",
xlab = "Диаметр юбки",
ylab = "Плотность вероятности",
main = "PuasDistr Гистограмма"
);
sort(PuasDistr)
hist(PuasDistr,
breaks = 200,
freq = F,
col = "lightblue",
xlab = "Диаметр юбки",
ylab = "Плотность вероятности",
main = "PuasDistr Гистограмма"
);
hist(PuasDistr,
breaks = 2,
freq = F,
col = "lightblue",
xlab = "Диаметр юбки",
ylab = "Плотность вероятности",
main = "PuasDistr Гистограмма"
);
hist(PuasDistr,
breaks = 20,
freq = F,
col = "lightblue",
xlab = "Диаметр юбки",
ylab = "Плотность вероятности",
main = "PuasDistr Гистограмма"
);
hist(PuasDistr,
breaks = 200,
freq = F,
col = "lightblue",
xlab = "Диаметр юбки",
ylab = "Плотность вероятности",
main = "PuasDistr Гистограмма"
);
hist(PuasDistr,
breaks = 20,
freq = F,
col = "lightblue",
xlab = "Диаметр юбки",
ylab = "Плотность вероятности",
main = "PuasDistr Гистограмма"
);
exc = function(x){
sum((x-mean(x))^4)/length(x)/var(x)^2-3;
}
asm = function(x){
sum((x-mean(x))^3)/length(x)/var(x)^(3/2)
}
allProp = function(x){ data.frame(mean = mean(x),var = var(x),median  = median(x),asm = asm(x),exc = exc(x))}
View(allProp)
distributionsProp = t(sapply(distributions,allProp))
distributionsProp
pPuasDistr <- ecdf(PuasDistr) # эмпир функц
pPuasDistr
pPuasDistr(PuasDistr)  # процентили
pPuasDistr(a)
pPuasDistr(b)
pPuas = function(a,b){pPuasDistr(b) - pPuasDistr(a)}
pPuas(a,b)
library(dplyr)
library(tidyr)
library(xtable)
library(ggvis)
library(ggplot2)
set.seed(100);
options(scipen = 0, digits = 3)
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE,fig.path = "README_figs/README-")
#init
set.seed(100);
#   выборочный эксцесс
exc = function(x){
sum((x-mean(x))^4)/length(x)/var(x)^2-3;
}
#   выборочную асимметрию
asm = function(x){
sum((x-mean(x))^3)/length(x)/var(x)^(3/2)
}
#   все характеристики
allProp = function(x){ data.frame(mean = mean(x),var = var(x),median  = median(x),asm = asm(x),exc = exc(x))}
x<-scan ("puas.txt"); print (x)
sortVec<-sort(x); print (sortVec) #вариационный ряд
table (x)
f<-function(x,t){z<-x[x<t]; length(z)/length(x)}
xu<-unique (sort(x))
print (xu)
xu<-unique (sort(x))
print (xu)
yu<-0; for(i in 1:length(xu)) yu[i]<-f(x,xu[i]); yu[length(xu)+1]<-1
print (yu)
z<-stepfun(xu,yu)
plot(z,verticals=FALSE)
a_1 = 0.02; a = 0.00; b = 5.79; lamda_0 = 4.00; lamda_1 = 6.00
a_1 = 0.02; a = 0.00; b = 5.79; lamda_0 = 4.00; lamda_1 = 6.00
PuasDistr = as.vector(read.table("puas.txt",sep = " ",dec = "."),mode = "double");
distributions = list(PuasDistr=PuasDistr);
sort(PuasDistr)
table (PuasDistr)
table (x)
x
PuasDistr
x<-scan ("puas.txt"); print (x)
read.table("puas.txt",sep = " ",dec = ".")
read.table("puas.txt",sep = " ",dec = ".")
PuasDistr = as.vector(read.table("puas.txt",sep = " ",dec = "."),mode = "double");
PuasDistr = as.vector(read.table("puas.txt",sep = " ",dec = "."),mode = "double");
a_1 = 0.02; a = 0.00; b = 5.79; lamda_0 = 4.00; lamda_1 = 6.00
PuasDistr = as.vector(read.table("puas.txt",sep = " ",dec = "."),mode = "double");
PuasDistr = as.vector(read.table("puas.txt",sep = " ",dec = "."),mode = "double");
PuasDistr = as.vector(read.table("puas.txt",sep = " ",dec = "."),mode = "double");
sort(PuasDistr)
table (PuasDistr)
x<-scan ("puas.txt"); print (x)
table (x)
lapply(distributions,FUN = plot.ecdf,col.01line = "red",col="green")
distributions = list(PuasDistr=PuasDistr);
lapply(distributions,FUN = plot.ecdf,col.01line = "red",col="green")
hist (x, breaks = c(0 : max(x)),col = "yellow", right = TRUE, freq = TRUE)
hist(PuasDistr,
breaks = 20,
freq = F,
col = "lightblue",
xlab = "Диаметр юбки",
ylab = "Плотность вероятности",
main = "PuasDistr Гистограмма"
);
mean<-sum(x)/length(x); print (mean) #мат ож
var<-sum(x^2)/length(x)-mean^2; print (var) #дисперсия
med<-sort(x)[trunc(length(x)*1/2+1)]; print (med)  #медиана - выборочная квантиль порядка 1/2
set.seed(100);
exc = function(x){
sum((x-mean(x))^4)/length(x)/var(x)^2-3;
}
asm = function(x){
sum((x-mean(x))^3)/length(x)/var(x)^(3/2)
}
allProp = function(x){ data.frame(mean = mean(x),var = var(x),median  = median(x),asm = asm(x),exc = exc(x))}
a_1 = 0.02; a = 0.00; b = 5.79; lamda_0 = 4.00; lamda_1 = 6.00
distributionsProp = t(sapply(distributions,allProp))
View(distributionsProp)
p<-f(x,b)-f(x,a); print (p)  #вероятность попадания в промежуток
f<-function(x,t){z<-x[x<t]; length(z)/length(x)}
p<-f(x,b)-f(x,a); print (p)  #вероятность попадания в промежуток
pPuasDistr <- ecdf(PuasDistr) # эмпир функц
pPuasDistr
pPuas = function(a,b){pPuasDistr(b) - pPuasDistr(a)}
pPuas(a,b)
pPuasDistr(b)
pPuasDistr(a)
p<-f(x,b)-f(x,a); print (p)  #вероятность попадания в промежуток
a_1 = 0.02; a = 0.00; b = 5.79; lamda_0 = 4.00; lamda_1 = 6.00
p<-f(x,b)-f(x,a); print (p)  #вероятность попадания в промежуток
f(x,b)
f(x,a)
a
a
pPuasDistr(a)
library(maxLik)
list.of.packages <- c("maxLik","rmarkdown","revealjs","dplyr","tidyr","xtable","ggvis","ggplot2", "Rcpp")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(dplyr)
library(tidyr)
library(xtable)
library(ggvis)
library(ggplot2)
library(maxLik)
LL<-function(t){sum(dpois(distributions$PuasDistr,t[1],log=TRUE))}
ml<-maxNR(LL,start=c(1)) #максимум функции правдоподобия
val<-ml$estimate; print (val) #оценка максимального правдоподобия
x__a_1<-qnorm (1-a_1/2)
T<-array(dim=2)
T[1]<-mean-x__a_1*sqrt(mean/length(x))
T[2]<-mean+x__a_1*sqrt(mean/length(x))
T #доверительный интервал
x = pPuas
x
set.seed(100);
exc = function(x){
sum((x-mean(x))^4)/length(x)/var(x)^2-3;
}
asm = function(x){
sum((x-mean(x))^3)/length(x)/var(x)^(3/2)
}
allProp = function(x){ data.frame(mean = mean(x),var = var(x),median  = median(x),asm = asm(x),exc = exc(x))}
a_1 = 0.02; a = 0.00; b = 5.79; lamda_0 = 4.00; lamda_1 = 6.00
PuasDistr = as.vector(read.table("puas.txt",sep = " ",dec = "."),mode = "double");
distributions = list(PuasDistr=PuasDistr);
sort(PuasDistr)
table (PuasDistr)
lapply(distributions,FUN = plot.ecdf,col.01line = "red",col="green")
hist(PuasDistr,
breaks = 20,
freq = F,
col = "lightblue",
xlab = "Диаметр юбки",
ylab = "Плотность вероятности",
main = "PuasDistr Гистограмма"
);
distributionsProp = t(sapply(distributions,allProp))
pPuasDistr <- ecdf(PuasDistr) # эмпир функц
pPuasDistr # pPuasDistr<-function(x,t){z<-x[x<t]; length(z)/length(x)}
pPuasDistr(PuasDistr)  # процентили
pPuas = function(a,b){pPuasDistr(b) - pPuasDistr(a)}
pPuas(a,b)
LL<-function(t){sum(dpois(distributions$PuasDistr,t[1],log=TRUE))}
ml<-maxNR(LL,start=c(1)) #максимум функции правдоподобия
val<-ml$estimate; print (val) #оценка максимального правдоподобия
PuasDistr__a_1<-qnorm (1-a_1/2)
PuasDistr__a_1<-qnorm (1-a_1/2)
T<-array(dim=2)
T[1]<-mean-PuasDistr__a_1*sqrt(mean/length(PuasDistr))
T[2]<-mean+pPuas__a_1*sqrt(mean/length(PuasDistr))
T #доверительный интервал
T<-array(dim=2)
T[1]<-mean-PuasDistr__a_1*sqrt(mean/length(PuasDistr))
T[2]<-mean+PuasDistr__a_1*sqrt(mean/length(PuasDistr))
T #доверительный интервал
PuasDistr__a_1<-qnorm (1-a_1/2)
T<-array(dim=2)
T[1]<-mean-PuasDistr__a_1*sqrt(mean/length(PuasDistr))
PuasDistr
mean
distributionsProp
distributionsProp[1]
distributionsProp["mean"]
distributionsProp["PuasDistr"]["mean"]
PuasDistr__a_1<-qnorm (1-a_1/2)
T<-array(dim=2)
mean = distributionsProp[0]
T[1]<-mean-PuasDistr__a_1*sqrt(mean/length(PuasDistr))
T[2]<-mean+PuasDistr__a_1*sqrt(mean/length(PuasDistr))
mean
distributionsProp[0]
distributionsProp
distributionsProp[0]
distributionsProp[[0]]
distributionsProp
View(distributionsProp)
mean =
distributionsProp[1]
distributionsProp[1]
T<-array(dim=2)
mean = distributionsProp[1]
T[1]<-mean-PuasDistr__a_1*sqrt(mean/length(PuasDistr))
mean
mean = c(distributionsProp[1])
mean
mean = as.numeric(distributionsProp[1])
T[1]<-mean-PuasDistr__a_1*sqrt(mean/length(PuasDistr))
T[2]<-mean+PuasDistr__a_1*sqrt(mean/length(PuasDistr))
T #доверительный интервал
x = PuasDistr
n<-length(x); r<-3
a1<-c(-Inf, 5, 6); b1<-c(4, 5, Inf)
border <-c(4, 5) #общий массив границ интервалов
h<-hist(x,breaks=c(min(x),border,max(x)),plot=FALSE)
print(nu)
nu<-h$counts; print (nu)
p1<-array(dim = r)
p1[1]<- ppois(border[1], lamda_0)
p1[r] <- 1-ppois(border[r-1], lamda_0)
p1[2:(r-1)]<-ppois(border[2:(r-1)],lamda_0)-ppois(border[1:(r-2)],lamda_0)
print (p1)
res <- array (dim = r)
res [1:r] <- (nu[1:r] - n*p1[1:r])/sqrt(n*p1[1:r])
print (res)
res2 <- array (dim = r)
res2 [1:r]<- (res[1:r])^2
print (res2)
Xi2<-sum(res2)
xal<-qchisq(1-al, r-1)
xal<-qchisq(1-a_1, r-1)
Xi2>xal
al2<-1-pchisq(Xi2,r-1); al2
csq<-function (t){  #для X2
p<-pnorm(b1,0,t) - pnorm (a1,0,t);
f<-sum((nu-n*p)^2/(n*p));
print (f)
}
X2<-nlm(csq,p=mean(x))
nlm
csq<-function (t){  #для X2
p<-pnorm(b1,0,t) - pnorm (a1,0,t);
f<-sum((nu-n*p)^2/(n*p));
print (f)
}
X2<-nlm(csq,p=mean(x))
X2<-nlm(csq,p=mean(x))
X2
xal1<-qchisq (1-a_1, r-2)
X2$minimum<=xal1
xal1<-qchisq (1-a_1, r-2)
X2$minimum<=xal1
alpha2<-1-pchisq(X2$minimum,r-2)
print (alpha2)
c<-0
alpha1<-0.02
alpha0<-1-ppois(c,lambda0*n)-dpois(c, 8*n)
while (alpha0 > alpha1)
while (alpha0 > alpha1)
{
c<-c+1;
alpha0<-1-ppois(c,lambda0*n)-dpois(c, lambda0*n)
}
alpha1<-0.02
lambda0 = lamda_0
alpha0<-1-ppois(c,lambda0*n)-dpois(c, 8*n)
while (alpha0 > alpha1)
while (alpha0 > alpha1)
{
c<-c+1;
alpha0<-1-ppois(c,lambda0*n)-dpois(c, lambda0*n)
}
c
p<-(alpha1-alpha0)/dpois(c,lambda0*n)
p
alpha0
lche<- sum(x)
lche>=c
c<-0; lambda1 <-5
alpha0<-ppois(c,lambda1*n)
while(alpha0<alpha1){
c<-c+1;
alpha0<-ppois(c,lambda1*n)
}
c<-c-1
c
alpha0<-ppois(c,lambda1*n)
p<-(alpha1-alpha0)/(dpois(c,lambda1*n))
alpha0
p
lche<- sum(x)
lche<=c
library(maxLik)
LL<-function(t){sum(dgeom(x,t[1],log=TRUE))}
ml<-maxNR(LL,start=c(1)) #максимум функции правдоподобия
val<-ml$estimate; print (val) #оценка макс.правдоподобия
n<-1000
alpha1<-0.2
alpha2<-0.1
alpha3<-0.05
alpha4<-0.01
def_p<-2
def_q<-3
beta<-rbeta(n,def_p,def_q)
beta<-sort(beta)
quantile_kolm=function(alpha,n) {
return (sqrt(-1/2*log(alpha/2))/sqrt(n))
}
F=function(t){
return (pbeta(t,def_p+0.001,def_q))             # ЗДЕСЬ ЗАДАЕТСЯ (EPS)
}
Fn<-ecdf(beta)
l1<-beta[1:(n-1)]
l2<-beta[2:n]
m<-min(abs(l1-l2))
eps<-0.1*m
Dn<-0
for(y in beta) {
d1<-abs(Fn(y) - F(y))
d2<-abs(Fn(y-eps) - F(y))
d<-max(d1,d2)
if(d>Dn) {
Dn<-d
}
}
q_kolm<-numeric(4)
q_kolm[1]<-quantile_kolm(alpha1,n)
q_kolm[2]<-quantile_kolm(alpha2,n)
q_kolm[3]<-quantile_kolm(alpha3,n)
q_kolm[4]<-quantile_kolm(alpha4,n)
for(i in 1:4) {
if(Dn < q_kolm[i]) {
print("H_0")
} else {
print("H_1")
}
}
my_pvalue_kolm<-1-pkolm(Dn,n)
tmp_kolm<-ks.test(beta, "pbeta", def_p+0.001, def_q)        # ЗДЕСЬ ЗАДАЁТСЯ (EPS)
pvalue_kolm<-tmp_kolm$p.value
statistics_kolm<-tmp_kolm$statistic
q_chisq<-numeric(4)
list.of.packages <- c("kolmim","rmarkdown","revealjs","dplyr","tidyr","xtable","ggvis","ggplot2", "Rcpp","fitdistrplus")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
