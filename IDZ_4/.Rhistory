}))
(norm_test_results = (lapply(epsilon,
function(eps) {
t(sapply(norm_data[-1],norm_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a),
sd = paramN$sd))
})))
(t_tests_results = lapply(epsilon,
function(eps) {
sapply(norm_data[-1],t_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a))
}))
t_tests_results
str(t_tests_results)
View(t_test_from_file_results)
sapply(epsilon,
function(eps) {
sapply(norm_data[-1],t_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a))
}))
sapply(epsilon,
function(eps) {
sapply(norm_data[-1],t_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a))
}))
(t_tests_results = sapply(epsilon,
function(eps) {
sapply(norm_data[-1],t_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a))
}))
(t_tests_results = sapply(epsilon,
function(eps) {
sapply(norm_data[-1],t_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a))
}))[[1]]
(t_tests_results = sapply(epsilon,
function(eps) {
sapply(norm_data[-1],t_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a))
}))
sapply(norm_data[-1],t_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a))
eps
eps=0
sapply(norm_data[-1],t_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a))
t_test <- function(X,possible_mean,a_levels) {
test = list();
#предполагаемое среднее
test$possible_mean = possible_mean
#значение распределения
test$statistic = sqrt(length(X))*(mean(X)-possible_mean)/sqrt(var(X));
#пороговое значение
tmp = data.frame(сritical_value = qt(1-a_levels/2,length(X)-1))
#принимаем или нет
tmp = cbind(tmp,a_levels)
tmp = cbind(tmp,success = !(abs(test$statistic)>tmp$сritical_value))
test$levels = tmp
#реально достигнутый уровень значимости
test$p_value = min(2-2*pt(test$statistic,length(X)-1),2*pt(test$statistic,length(X)-1))
test
}
test = list();
test$possible_mean = possible_mean
test$statistic = sqrt(length(X))*(mean(X)-possible_mean)/sqrt(var(X));
tmp = data.frame(сritical_value = qt(1-a_levels/2,length(X)-1))
tmp = cbind(tmp,a_levels)
tmp = cbind(tmp,success = !(abs(test$statistic)>tmp$сritical_value))
test$levels = tmp
test
test$p_value = min(2-2*pt(test$statistic,length(X)-1),2*pt(test$statistic,length(X)-1))
test
test
t_test <- function(X,possible_mean,a_levels) {
test = list();
#предполагаемое среднее
test$possible_mean = possible_mean
#значение распределения
test$statistic = sqrt(length(X))*(mean(X)-possible_mean)/sqrt(var(X));
#пороговое значение
tmp = data.frame(сritical_value = qt(1-a_levels/2,length(X)-1))
#принимаем или нет
tmp = cbind(tmp,a_levels)
tmp = cbind(tmp,success = !(abs(test$statistic)>tmp$сritical_value))
test$levels = tmp
#реально достигнутый уровень значимости
test$p_value = min(2-2*pt(test$statistic,length(X)-1),2*pt(test$statistic,length(X)-1))
test
}
sapply(norm_data[-1],t_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a))
norm_data
norm_data[-1]
str(norm_data[-1])
set.seed(100)
norm_data=as.data.frame(read.csv("51_norm_-23.798434.csv",col.names = c("x")));
paramFile = list(mean = -23.798434,sd = 1)#из назв.файла и sd = 1(всегда)
a = c(0.25, 0.1, 0.05, 0.01, 0.001)
epsilon = c(10, 0.1, 0.01, 0)
paramN = list(mean = -23, sd = 5)#выбираются случ. знач.
sizeN = list(x10 = 10,x100=100,x1000=1000,x10000=10000)
epsilon_for_bern = c(0.2, 0.1, 0.01)
paramB = list(size = 1, prob =  1/10)
sizeB = list(x100=100)
norm_data = c(norm_data,rgenerate(sizeN,paramN))
bern_data = rgenerate(sizeB,paramB,rbinom)
sum(bern_data)
sapply(norm_data,summary)
sapply(norm_data,allProp)
sapply(norm_data,mean)
eps=0
(t_tests_results = sapply(epsilon,
function(eps) {
sapply(norm_data[-1],t_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a))
}))
(norm_test_results = (lapply(epsilon,
function(eps) {
t(sapply(norm_data[-1],norm_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a),
sd = paramN$sd))
})))
(t_tests_results = lapply(epsilon,
function(eps) {
sapply(norm_data[-1],t_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a))
}))
(norm_test_results = (lapply(epsilon,
function(eps) {
t(sapply(norm_data[-1],norm_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a),
sd = paramN$sd))
})))
str(t_tests_results)
tmp = rbind(norm_test_results[[1]],norm_test_results[[2]],norm_test_results[[3]])
tmp
as.data.frame(tmp,optional = F,row.names = "")
tmp
tmp[2]
tmp[,]
tmp[1,]
tmp[,1]
tmp
tmp[,3]
(t_tests_results = lapply(epsilon,
function(eps) {
t(sapply(norm_data[-1],t_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a)))
}))
(norm_test_results = (lapply(epsilon,
function(eps) {
t(sapply(norm_data[-1],norm_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a),
sd = paramN$sd))
})))
tmp = rbind(t_tests_results[[1]],t_tests_results[[2]],t_tests_results[[3]])
tmp[,3]
sapply(norm_data,mean)
allProp = function(x){ data.frame(mean = mean(x),var = var(x),asm = sum((x-mean(x))^3)/length(x)/var(x)^(3/2),exc = sum((x-mean(x))^4)/length(x)/var(x)^2-3)}
rgenerate <- function(size,params,FUN=rnorm){
sapply(size,function(x){do.call(FUN, c(params,x))})
}
norm_test <- function(X,possible_mean,sd,a_levels) {
test = c();
#предполагаемое среднее
test$possible_mean = possible_mean
#значение распределения
test$statistic = sqrt(length(X))*(mean(X)-possible_mean)/sd;
#пороговое значение
tmp = data.frame(critical_value = qnorm(1-a_levels/2))
#принимаем или нет
tmp = cbind(tmp,a_levels)
tmp = cbind(tmp,success = !(abs(test$statistic)>tmp$critical_value))
test$levels = tmp
#реально достигнутый уровень значимости
test$p_value = min(2-2*pnorm(test$statistic),2*pnorm(test$statistic))
test
}
t_test <- function(X,possible_mean,a_levels) {
test = list();
#предполагаемое среднее
test$possible_mean = possible_mean
#значение распределения
test$statistic = sqrt(length(X))*(mean(X)-possible_mean)/sqrt(var(X));
#пороговое значение
tmp = data.frame(critical_value = qt(1-a_levels/2,length(X)-1))
#принимаем или нет
tmp = cbind(tmp,a_levels)
tmp = cbind(tmp,success = !(abs(test$statistic)>tmp$critical_value))
test$levels = tmp
#реально достигнутый уровень значимости
test$p_value = min(2-2*pt(test$statistic,length(X)-1),2*pt(test$statistic,length(X)-1))
test
}
set.seed(100)
norm_data=as.data.frame(read.csv("51_norm_-23.798434.csv",col.names = c("x")));
paramFile = list(mean = -23.798434,sd = 1)#из назв.файла и sd = 1(всегда)
a = c(0.25, 0.1, 0.05, 0.01, 0.001)
epsilon = c(10, 0.1, 0.01, 0)
paramN = list(mean = -23, sd = 5)#выбираются случ. знач.
sizeN = list(x10 = 10,x100=100,x1000=1000,x10000=10000)
epsilon_for_bern = c(0.2, 0.1, 0.01)
paramB = list(size = 1, prob =  1/10)
sizeB = list(x100=100)
norm_data = c(norm_data,rgenerate(sizeN,paramN))
bern_data = rgenerate(sizeB,paramB,rbinom)
sum(bern_data)
sapply(norm_data,summary)
sapply(norm_data,allProp)
sapply(norm_data,mean)
eps=0
(t_tests_results = lapply(epsilon,
function(eps) {
t(sapply(norm_data[-1],t_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a)))
}))
(norm_test_results = (lapply(epsilon,
function(eps) {
t(sapply(norm_data[-1],norm_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a),
sd = paramN$sd))
})))
str(t_tests_results)
tmp = rbind(norm_test_results[[1]],norm_test_results[[2]],norm_test_results[[3]])
tmp[,3]
tmp = rbind(t_tests_results[[1]],t_tests_results[[2]],t_tests_results[[3]])
tmp[,3]
(norm_test_results = (lapply(epsilon,
function(eps) {
t(sapply(norm_data[-1],norm_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a),
sd = paramN$sd))
})))
tmp = rbind(norm_test_results[[1]],norm_test_results[[2]],norm_test_results[[3]])
tmp[,3]
tmp
tmp[,3]
(norm_test_results = (lapply(epsilon,
function(eps) {
t(sapply(norm_data[-1],norm_test,
possible_mean = paramN$mean+eps,
a_levels = (1-a),
sd = paramN$sd))
})))
tmp = rbind(norm_test_results[[1]],norm_test_results[[2]],norm_test_results[[3]],norm_test_results[[4]])
tmp[,3]
ggplot(tmp[,3])
ggplot(tmp[,3])
tmp[,3]
sapply(tmp[,3],select,success)
sapply(tmp[,3],select,success)
sapply(tmp[,3],select,"success")
select(tmp[,3],"success")
tmp[,3]
as.data.frame(tmp[,3])
select(as.data.frame(tmp[,3]),"success")
select(as.data.frame(tmp[,3]),success)
as.data.frame(tmp[,3])
select(as.data.frame(tmp[,3]),"*success*")
select(as.data.frame(tmp[,3]),"\*success\*")
tmp[,3]
tmp[,3]
tmp[,3]
bern_data
X = bern_data
h<-hist(X,breaks=c(min(X),b,max(X)),plot=FALSE);
bern_data
X = c(bern_data)
h<-hist(X,breaks=c(min(X),b,max(X)),plot=FALSE);
b=5
X = c(bern_data)
h<-hist(X,breaks=c(min(X),b,max(X)),plot=FALSE);
h
nu<-h$counts
nu
p<-array(dim=r);
b=r-1
r=6
b=r-1
X = c(bern_data)
h<-hist(X,breaks=c(min(X),b,max(X)),plot=FALSE);
nu<-h$counts
p<-array(dim=r);
s1<-sqrt(s2);
s1<-5;
p[1]<-pnorm(b[1],a,sd = s1)
a = 0.01;
p[1]<-pnorm(b[1],a,sd = s1)
b[r-1]= 1:5
r=6
b[r-1]= 1:5
b= 1:5
b
b= 1:5*20
b
b= 1:5*20 - 10
b
b= 1:4*20
r=5
b= 1:4*20
X = c(bern_data)
h<-hist(X,breaks=c(min(X),b,max(X)),plot=FALSE);
nu<-h$counts
h
nu
b
prob=rep(1/10,each=10)
X = c(bern_data)
h<-hist(X,breaks=c(min(X),b,max(X)),plot=FALSE);
min(X)
max(X)
s1<-5;
a = 0.01;
p[1]<-pnorm(b[1],a,sd = s1)
p[2:(r-1)]<-pnorm(b[2:(r-1)],a,s1)-pnorm(b[1:(r-2)],a,s1)
p[r]<-1-pnorm(b[r-1],a,s1)
v1<-(nu-p)/n/p;
nu
p
xa
r
prob=rep(1/10,each=10)
prob=rep(1/10,each=100)
prob
pchisq(X,prob)
chisq.test(X,prob)
X
chisq.test(bern_data,prob)
bern_data
chisq.test(as.list(bern_data),prob)
as.list(bern_data)
t(bern_data)
c(bern_data)
chisq.test(x=c(bern_data),prob)
chisq.test(list(x=c(bern_data)),prob)
list(x=c(bern_data))
bern_data
prob
prob
chisq.test(c(1,2),c(1,3))
chisq.test(c(1,2),c(0.1,0.2))
chisq.test(c(1,2),c(0.1,0.9))
chisq.test(bern_data,c(0.1,0.9))
chisq.test(c(bern_data),c(0.1,0.9))
chisq.test(c(bern_data),prob)
prob
c(bern_data)
chisq.test(c(bern_data),c(prob))
chisq.test(c(1),c(prob))
bern_data
c(bern_data)
c(bern_data+1)
chisq.test(c(1),c(prob))
chisq.test(c(bern_data+1),c(prob))
chisq.test(c(bern_data+1),p=prob)
chisq.test(c(bern_data),p=prob)
prob=rep(1/100,each=100)
chisq.test(c(bern_data),p=prob)
prob=с(rep(1,each=10),rep(0,each=90))
prob=c(rep(1,each=10),rep(0,each=90))
prob
chisq.test(c(bern_data),p=prob)
chisq.test(c(bern_data),prob)
prob=c(rep(0,each=10),rep(0,each=90))
chisq.test(c(bern_data),prob)
chisq.test(c(bern_data),prob)
prob=c(rep(0,each=10),rep(0,each=90))
chisq.test(c(bern_data),prob)
prob=c(rep(2,each=10),rep(0,each=90))
chisq.test(c(bern_data),prob)
bern_test <- function(X,possible_prob,a_levels) {
test = list();
#предполагаемое среднее
test$possible_prob = possible_prob
#значение распределения
test$statistic = length(X)*(mean(X)-possible_prob)/sqrt(length(X)*possible_prob*(1-possible_prob));
#пороговое значение
tmp = data.frame(critical_value = qnorm(1-a_levels/2))
#принимаем или нет
tmp = cbind(tmp,a_levels)
tmp = cbind(tmp,success = !(abs(test$statistic)>tmp$critical_value))
test$levels = tmp
#реально достигнутый уровень значимости
test$p_value = min(2-2*pnorm(test$statistic),2*pnorm(test$statistic))
test
}
(bern_test_results = (lapply(epsilon,
function(eps) {
t(sapply(norm_data[-1],bern_test,
possible_prob = paramB$prob+eps,
a_levels = (1-a)))
})))
possible_prob
paramB$prob
eps
t(sapply(norm_data[-1],bern_test,
possible_prob = paramB$prob+eps,
a_levels = (1-a)))
(bern_test_results = (lapply(epsilon,
function(eps) {
t(sapply(norm_data[-1],bern_test,
possible_prob = paramB$prob+eps,
a_levels = (1-a)))
})))
t(sapply(norm_data[-1],bern_test,
possible_prob = paramB$prob+eps,
a_levels = (1-a)))
bern_data
(bern_test_results = (lapply(epsilon,
function(eps) {
t(sapply(bern_data,bern_test,
possible_prob = paramB$prob+eps,
a_levels = (1-a)))
})))
t(sapply(bern_data,bern_test,
possible_prob = paramB$prob+eps,
a_levels = (1-a)))
t(bern_test(bern_data,
possible_prob = paramB$prob+eps,
a_levels = (1-a)))
(bern_test_results = (lapply(epsilon,
function(eps) {
t(bern_test(bern_data,
possible_prob = paramB$prob+eps,
a_levels = (1-a)))
})))
epsilon
eps
epsilon[-1]
(bern_test_results = (lapply(epsilon[-1],
function(eps) {
t(bern_test(bern_data,
possible_prob = paramB$prob+eps,
a_levels = (1-a)))
})))
tmp = rbind(bern_test_results[[1]],bern_test_results[[2]],bern_test_results[[3]],bern_test_results[[4]])
tmp = rbind(bern_test_results[[1]],bern_test_results[[2]],bern_test_results[[3]])
tmp[,3]
a
a = c(0.25, 0.1, 0.05, 0.01, 0.001)
epsilon_for_bern = c(0.2, 0.1, 0.01)
(bern_test_results = (lapply(epsilon_for_bern,
function(eps) {
t(bern_test(bern_data,
possible_prob = paramB$prob+eps,
a_levels = (1-a)))
})))
tmp = rbind(bern_test_results[[1]],bern_test_results[[2]],bern_test_results[[3]])
tmp[,3]
epsilon_for_bern
epsilon_for_bern = c(0.2, 0.1, 0.01,0)
(bern_test_results = (lapply(epsilon_for_bern,
function(eps) {
t(bern_test(bern_data,
possible_prob = paramB$prob+eps,
a_levels = (1-a)))
})))
tmp = rbind(bern_test_results[[1]],bern_test_results[[2]],bern_test_results[[3]])
tmp[,3]
(bern_test_results = (lapply(epsilon[-1],
function(eps) {
t(bern_test(bern_data,
possible_prob = paramB$prob+eps,
a_levels = (1-a)))
})))
sum(bern_data)
bern_data[1]=1
sum(bern_data)
bern_data[2]=1
sum(bern_data)
bern_data[3]=1
sum(bern_data)
(bern_test_results = (lapply(epsilon[-1],
function(eps) {
t(bern_test(bern_data,
possible_prob = paramB$prob+eps,
a_levels = (1-a)))
})))
paramB$prob
tmp = rbind(bern_test_results[[1]],bern_test_results[[2]],bern_test_results[[3]])
tmp[,3]
(t_test_from_file_results = sapply(norm_data[1],t_test,
possible_mean = paramFile$mean,
a_levels = (1-a)))
t_test_from_file_results
t_test_from_file_results[3]
t(bern_test(bern_data,
possible_prob = paramB$prob,
a_levels = (1-a)))
tmp =t(bern_test(bern_data,
possible_prob = paramB$prob,
a_levels = (1-a)))
tmp[3]
